// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MrsFront.Model;

namespace MrsFront.Migrations
{
    [DbContext(typeof(SQLiteContext))]
    partial class SQLiteContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024");

            modelBuilder.Entity("MrsFront.Model.Membership", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("UsesLeft");

                    b.HasKey("Id");

                    b.ToTable("Memberships");
                });

            modelBuilder.Entity("MrsFront.Model.Movie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("AverageRating");

                    b.Property<string>("Description");

                    b.Property<string>("ImageUrl");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.ToTable("Movies");
                });

            modelBuilder.Entity("MrsFront.Model.MovieTag", b =>
                {
                    b.Property<int>("TagId");

                    b.Property<int>("MovieId");

                    b.HasKey("TagId", "MovieId");

                    b.HasIndex("MovieId");

                    b.ToTable("MovieTags");
                });

            modelBuilder.Entity("MrsFront.Model.Payment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("Amount");

                    b.Property<int?>("MembershipId");

                    b.Property<DateTime>("PaymentDate");

                    b.Property<string>("Type");

                    b.HasKey("Id");

                    b.HasIndex("MembershipId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("MrsFront.Model.Recommendation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("PaymentId");

                    b.Property<bool>("UsedForMembership");

                    b.Property<int?>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("PaymentId");

                    b.HasIndex("UserId");

                    b.ToTable("Recommendations");
                });

            modelBuilder.Entity("MrsFront.Model.RecommendedMovie", b =>
                {
                    b.Property<int>("MovieId");

                    b.Property<int>("RecommendationId");

                    b.Property<double>("PossibleRating");

                    b.HasKey("MovieId", "RecommendationId");

                    b.HasIndex("RecommendationId");

                    b.ToTable("RecommendedMovies");
                });

            modelBuilder.Entity("MrsFront.Model.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Text");

                    b.HasKey("Id");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("MrsFront.Model.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Email");

                    b.Property<int?>("MembershipId");

                    b.Property<string>("PasswordHash");

                    b.HasKey("Id");

                    b.HasIndex("MembershipId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("MrsFront.Model.UserMovie", b =>
                {
                    b.Property<int>("MovieId");

                    b.Property<int>("UserId");

                    b.Property<float>("Rating");

                    b.HasKey("MovieId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("UserMovies");
                });

            modelBuilder.Entity("MrsFront.Model.UserTagWhish", b =>
                {
                    b.Property<int>("TagId");

                    b.Property<int>("UserId");

                    b.HasKey("TagId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("UserTagWhishes");
                });

            modelBuilder.Entity("MrsFront.Model.MovieTag", b =>
                {
                    b.HasOne("MrsFront.Model.Movie")
                        .WithMany("Tags")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MrsFront.Model.Tag", "Tag")
                        .WithMany()
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MrsFront.Model.Payment", b =>
                {
                    b.HasOne("MrsFront.Model.Membership")
                        .WithMany("Payments")
                        .HasForeignKey("MembershipId");
                });

            modelBuilder.Entity("MrsFront.Model.Recommendation", b =>
                {
                    b.HasOne("MrsFront.Model.Payment", "Payment")
                        .WithMany()
                        .HasForeignKey("PaymentId");

                    b.HasOne("MrsFront.Model.User")
                        .WithMany("Recommendations")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("MrsFront.Model.RecommendedMovie", b =>
                {
                    b.HasOne("MrsFront.Model.Movie", "Movie")
                        .WithMany()
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MrsFront.Model.Recommendation")
                        .WithMany("RecommendedMovies")
                        .HasForeignKey("RecommendationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MrsFront.Model.User", b =>
                {
                    b.HasOne("MrsFront.Model.Membership", "Membership")
                        .WithMany()
                        .HasForeignKey("MembershipId");
                });

            modelBuilder.Entity("MrsFront.Model.UserMovie", b =>
                {
                    b.HasOne("MrsFront.Model.Movie", "Movie")
                        .WithMany()
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MrsFront.Model.User")
                        .WithMany("UserMovies")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MrsFront.Model.UserTagWhish", b =>
                {
                    b.HasOne("MrsFront.Model.Tag", "Tag")
                        .WithMany()
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MrsFront.Model.User")
                        .WithMany("TagWhishes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
